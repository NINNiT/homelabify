[{"/home/simon/development/homelabify/frontend/src/index.js":"1","/home/simon/development/homelabify/frontend/src/reportWebVitals.js":"2","/home/simon/development/homelabify/frontend/src/App.js":"3","/home/simon/development/homelabify/frontend/src/components/Status.js":"4","/home/simon/development/homelabify/frontend/src/components/Plot.js":"5"},{"size":500,"mtime":1610831075099,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610831075099,"results":"8","hashOfConfig":"7"},{"size":3549,"mtime":1610899914941,"results":"9","hashOfConfig":"7"},{"size":1928,"mtime":1611101196032,"results":"10","hashOfConfig":"7"},{"size":294,"mtime":1610899638975,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"405lbc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/home/simon/development/homelabify/frontend/src/index.js",[],["24","25"],"/home/simon/development/homelabify/frontend/src/reportWebVitals.js",[],"/home/simon/development/homelabify/frontend/src/App.js",["26","27","28","29"],"import React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.scss';\nimport CustomPlot from \"./components/Plot\";\nimport Status from \"./components/Status\";\n\nfunction App() {\n\n  const [rackTempData, setRackTempData] = useState(null)\n  const [rackHumData, setRackHumData] = useState(null)\n  const [deviceCpuFreqData, setDeviceCpuFreqData] = useState(null)\n  const [deviceCpuPercData, setDeviceCpuPercData] = useState(null)\n  const [deviceMemData, setDeviceMemData] = useState(null)\n  const [deviceDiskData, setDeviceDiskData] = useState(null)\n\n  const fetchMeasurements = async () => {\n    const [rackTemp, rackHum, deviceCpu, deviceMem, deviceDisk] = await Promise.all([\n      fetch(\"http://localhost:4000/api/temperature/celsius\").then(res => res.json()),\n      fetch(\"http://localhost:4000/api/temperature/humidity\").then(res => res.json()),\n      fetch(\"http://localhost:4000/api/device/cpu\").then(res => res.json()),\n      fetch(\"http://localhost:4000/api/device/memory\").then(res => res.json()),\n      fetch(\"http://localhost:4000/api/device/disk\").then(res => res.json())\n    ]);\n\n    setRackTempData(dataToPlot(\"bar\", rackTemp, [\"temp_c\"]));\n    setRackHumData(dataToPlot(\"bar\", rackHum, [\"humidity\"]));\n    setDeviceCpuFreqData(dataToPlot(\"bar\", deviceCpu, [\"cpu_freq_current\"]));\n    setDeviceCpuPercData(dataToPlot(\"bar\", deviceCpu, [\"cpu_percent\"]));\n    setDeviceMemData(dataToPlot(\"line\", deviceMem, [\"mem_free\", \"mem_used\"]));\n    setDeviceDiskData(dataToPlot(\"line\", deviceDisk, [\"disk_free\", \"disk_used\"]));\n  }\n\n  const dataToPlot = (type, data, values) => {\n    let plotData = []\n    switch (values.length) {\n      case 1:\n        plotData = [{\n          type: type,\n          y: unpackData(data, values[0]),\n          x: unpackData(data, \"time\")\n        }];\n\n        break;\n      case 2:\n        plotData = [\n          {\n            type: type,\n            name: values[0],\n            y: unpackData(data, values[0]),\n            x: unpackData(data, \"time\")\n          },\n          {\n            type: type,\n            name: values[1],\n            y: unpackData(data, values[1]),\n            x: unpackData(data, \"time\")\n          },\n        ];\n        break;\n      case 3:\n        break;\n    }\n    return plotData;\n  }\n\n  const unpackData = (arr, key) => {\n    return arr.map(obj => obj[key])\n  }\n\n  useEffect(() => {\n    fetchMeasurements();\n    const interval = setInterval(() => {\n      fetchMeasurements();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const graphConfig = {\n    scrollZoom: true\n  }\n\n  const graphLayout = {\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Homelabify</h1>\n      </header>\n      <Status />\n      <section className=\"bottom-content\">\n        <CustomPlot layout={{ title: \"Rack | Temperature in Â°C\" }} graphData={rackTempData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Rack | Humidity in %\" }} graphData={rackHumData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | CPU Frequency in Mhz\" }} graphData={deviceCpuFreqData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | CPU Load in %\" }} graphData={deviceCpuPercData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | Memory in MB\" }} graphData={deviceMemData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | Disk in Byte\" }} graphData={deviceDiskData} config={graphConfig} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","/home/simon/development/homelabify/frontend/src/components/Status.js",[],"/home/simon/development/homelabify/frontend/src/components/Plot.js",[],{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":2,"column":8,"nodeType":"36","messageId":"37","endLine":2,"endColumn":12},{"ruleId":"38","severity":1,"message":"39","line":35,"column":5,"nodeType":"40","messageId":"41","endLine":62,"endColumn":6},{"ruleId":"42","severity":1,"message":"43","line":77,"column":6,"nodeType":"44","endLine":77,"endColumn":8,"suggestions":"45"},{"ruleId":"34","severity":1,"message":"46","line":83,"column":9,"nodeType":"36","messageId":"37","endLine":83,"endColumn":20},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMeasurements'. Either include it or remove the dependency array.","ArrayExpression",["49"],"'graphLayout' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [fetchMeasurements]",{"range":"52","text":"53"},[2526,2528],"[fetchMeasurements]"]