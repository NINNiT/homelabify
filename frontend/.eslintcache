[{"/home/simon/development/homelabify/frontend/src/index.js":"1","/home/simon/development/homelabify/frontend/src/reportWebVitals.js":"2","/home/simon/development/homelabify/frontend/src/App.js":"3","/home/simon/development/homelabify/frontend/src/components/Status.js":"4","/home/simon/development/homelabify/frontend/src/components/Plot.js":"5"},{"size":500,"mtime":1610831075099,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":1610831075099,"results":"8","hashOfConfig":"7"},{"size":3775,"mtime":1611158423323,"results":"9","hashOfConfig":"7"},{"size":2131,"mtime":1611158423324,"results":"10","hashOfConfig":"7"},{"size":294,"mtime":1610899638975,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"lrjgwd",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"/home/simon/development/homelabify/frontend/src/index.js",[],["25","26"],"/home/simon/development/homelabify/frontend/src/reportWebVitals.js",[],"/home/simon/development/homelabify/frontend/src/App.js",["27","28","29","30"],"import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport CustomPlot from \"./components/Plot\";\nimport Status from \"./components/Status\";\n\nfunction App() {\n  const [rackTempData, setRackTempData] = useState(null);\n  const [rackHumData, setRackHumData] = useState(null);\n  const [deviceCpuFreqData, setDeviceCpuFreqData] = useState(null);\n  const [deviceCpuPercData, setDeviceCpuPercData] = useState(null);\n  const [deviceMemData, setDeviceMemData] = useState(null);\n  const [deviceDiskData, setDeviceDiskData] = useState(null);\n\n  const fetchMeasurements = async () => {\n    const [\n      rackTemp,\n      rackHum,\n      deviceCpu,\n      deviceMem,\n      deviceDisk,\n    ] = await Promise.all([\n      fetch(\"/api/temperature/celsius\").then((res) => res.json()),\n      fetch(\"/api/temperature/humidity\").then((res) => res.json()),\n      fetch(\"/api/device/cpu\").then((res) => res.json()),\n      fetch(\"/api/device/memory\").then((res) => res.json()),\n      fetch(\"/api/device/disk\").then((res) => res.json()),\n    ]);\n\n    setRackTempData(dataToPlot(\"bar\", rackTemp, [\"temp_c\"]));\n    setRackHumData(dataToPlot(\"bar\", rackHum, [\"humidity\"]));\n    setDeviceCpuFreqData(dataToPlot(\"bar\", deviceCpu, [\"cpu_freq_current\"]));\n    setDeviceCpuPercData(dataToPlot(\"bar\", deviceCpu, [\"cpu_percent\"]));\n    setDeviceMemData(dataToPlot(\"line\", deviceMem, [\"mem_free\", \"mem_used\"]));\n    setDeviceDiskData(\n      dataToPlot(\"line\", deviceDisk, [\"disk_free\", \"disk_used\"])\n    );\n  };\n\n  const dataToPlot = (type, data, values) => {\n    let plotData = [];\n    switch (values.length) {\n      case 1:\n        plotData = [\n          {\n            type: type,\n            y: unpackData(data, values[0]),\n            x: unpackData(data, \"time\"),\n          },\n        ];\n\n        break;\n      case 2:\n        plotData = [\n          {\n            type: type,\n            name: values[0],\n            y: unpackData(data, values[0]),\n            x: unpackData(data, \"time\"),\n          },\n          {\n            type: type,\n            name: values[1],\n            y: unpackData(data, values[1]),\n            x: unpackData(data, \"time\"),\n          },\n        ];\n        break;\n      case 3:\n        break;\n    }\n    return plotData;\n  };\n\n  const unpackData = (arr, key) => {\n    return arr.map((obj) => obj[key]);\n  };\n\n  useEffect(() => {\n    fetchMeasurements();\n    const interval = setInterval(() => {\n      fetchMeasurements();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const graphConfig = {\n    scrollZoom: true,\n  };\n\n  const graphLayout = {};\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Homelabify</h1>\n      </header>\n      <Status />\n      <section className=\"bottom-content\">\n        <CustomPlot\n          layout={{ title: \"Rack | Temperature in Â°C\" }}\n          graphData={rackTempData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Rack | Humidity in %\" }}\n          graphData={rackHumData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | CPU Frequency in Mhz\" }}\n          graphData={deviceCpuFreqData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | CPU Load in %\" }}\n          graphData={deviceCpuPercData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | Memory in MB\" }}\n          graphData={deviceMemData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | Disk in Byte\" }}\n          graphData={deviceDiskData}\n          config={graphConfig}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","/home/simon/development/homelabify/frontend/src/components/Status.js",[],["31","32"],"/home/simon/development/homelabify/frontend/src/components/Plot.js",[],{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":2,"column":8,"nodeType":"39","messageId":"40","endLine":2,"endColumn":12},{"ruleId":"41","severity":1,"message":"42","line":42,"column":5,"nodeType":"43","messageId":"44","endLine":71,"endColumn":6},{"ruleId":"45","severity":1,"message":"46","line":86,"column":6,"nodeType":"47","endLine":86,"endColumn":8,"suggestions":"48"},{"ruleId":"37","severity":1,"message":"49","line":92,"column":9,"nodeType":"39","messageId":"40","endLine":92,"endColumn":20},{"ruleId":"33","replacedBy":"50"},{"ruleId":"35","replacedBy":"51"},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchMeasurements'. Either include it or remove the dependency array.","ArrayExpression",["54"],"'graphLayout' is assigned a value but never used.",["52"],["53"],"no-global-assign","no-unsafe-negation",{"desc":"55","fix":"56"},"Update the dependencies array to be: [fetchMeasurements]",{"range":"57","text":"58"},[2525,2527],"[fetchMeasurements]"]