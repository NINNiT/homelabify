{"version":3,"sources":["logo.svg","components/Plot.js","components/Status.js","App.js","reportWebVitals.js","index.js"],"names":["CustomPlot","props","className","data","graphData","layout","config","Status","useState","netInfo","setNetInfo","healthCheck","setHealthCheck","fetchNetworkInfo","a","fetch","then","res","json","ip","hostname","fetchHealthCheck","influxdb","influxdb_status","measurement","measurement_status","alert","alert_status","useEffect","interval","setInterval","clearInterval","onClick","App","rackTempData","setRackTempData","rackHumData","setRackHumData","deviceCpuFreqData","setDeviceCpuFreqData","deviceCpuPercData","setDeviceCpuPercData","deviceMemData","setDeviceMemData","deviceDiskData","setDeviceDiskData","fetchMeasurements","Promise","all","rackTemp","rackHum","deviceCpu","deviceMem","deviceDisk","dataToPlot","type","values","plotData","length","y","unpackData","x","name","arr","key","map","obj","graphConfig","scrollZoom","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d71e1d9a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport Plot from 'react-plotly.js';\n\nconst CustomPlot = (props) => {\n\n  return (\n    <div className=\"plotwrapper\">\n      <Plot className=\"linegraph\" data={props.graphData} layout={props.layout} config={props.config} />\n    </div>\n  );\n\n};\n\nexport default CustomPlot;\n","\nimport React, { useState, useEffect } from \"react\";\n\nconst Status = (props) => {\n\n  const [netInfo, setNetInfo] = useState({});\n  const [healthCheck, setHealthCheck] = useState({});\n\n  const fetchNetworkInfo = async () => {\n    let data = await fetch(\"http://192.168.0.21:4000/api/device/net\")\n      .then(res => res.json());\n\n    setNetInfo({\n      ip: data[0].ip,\n      hostname: data[0].hostname\n    })\n  }\n\n  const fetchHealthCheck = async () => {\n    let data = await fetch(\"http://192.168.0.21:4000/api/healthcheck\")\n      .then(res => res.json());\n\n    setHealthCheck({\n      influxdb: data[0].influxdb_status,\n      measurement: data[0].measurement_status,\n      alert: data[0].alert_status\n    })\n  }\n\n  const toggleAlert = () => {\n    fetch(\"http://192.168.0.21:4000/api/control/alert\");\n  }\n\n  const toggleMeasurement = () => {\n    fetch(\"http://192.168.0.21:4000/api/control/measurement\");\n  }\n\n\n  useEffect(() => {\n    fetchNetworkInfo();\n    fetchHealthCheck();\n    const interval = setInterval(() => {\n      fetchNetworkInfo();\n      fetchHealthCheck();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"top-content\">\n      <div className=\"top-content-status\">\n        <div>\n          <b>IP </b> {netInfo.ip}\n        </div>\n        <div>\n          <b>Hostname </b> {netInfo.hostname}\n        </div>\n        <div>\n          <b>influxdb </b>\n          <span className={healthCheck.influxdb ? \"green\" : \"red\"}>{healthCheck.influxdb ? \"running\" : \"not running\"}</span>\n        </div>\n        <div>\n          <b>measurement.py </b>\n          <span className={healthCheck.measurement ? \"green\" : \"red\"}>{healthCheck.measurement ? \"running\" : \"not running\"}</span>\n        </div>\n        <div>\n          <b>alert.py </b>\n          <span className={healthCheck.alert ? \"green\" : \"red\"}>{healthCheck.alert ? \"running\" : \"not running\"}</span>\n        </div>\n      </div>\n      <div className=\"top-content-buttons\">\n        <button onClick={toggleAlert}>Toggle Alerts</button>\n        <button onClick={toggleMeasurement}>Toggle Measurement</button>\n      </div>\n    </div>\n  );\n\n};\n\n\nexport default Status;\n","import React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.scss';\nimport CustomPlot from \"./components/Plot\";\nimport Status from \"./components/Status\";\n\nfunction App() {\n\n  const [rackTempData, setRackTempData] = useState(null)\n  const [rackHumData, setRackHumData] = useState(null)\n  const [deviceCpuFreqData, setDeviceCpuFreqData] = useState(null)\n  const [deviceCpuPercData, setDeviceCpuPercData] = useState(null)\n  const [deviceMemData, setDeviceMemData] = useState(null)\n  const [deviceDiskData, setDeviceDiskData] = useState(null)\n\n  const fetchMeasurements = async () => {\n    const [rackTemp, rackHum, deviceCpu, deviceMem, deviceDisk] = await Promise.all([\n      fetch(\"http://192.168.0.21:4000/api/temperature/celsius\").then(res => res.json()),\n      fetch(\"http://192.168.0.21:4000/api/temperature/humidity\").then(res => res.json()),\n      fetch(\"http://192.168.0.21:4000/api/device/cpu\").then(res => res.json()),\n      fetch(\"http://192.168.0.21:4000/api/device/memory\").then(res => res.json()),\n      fetch(\"http://192.168.0.21:4000/api/device/disk\").then(res => res.json())\n    ]);\n\n    setRackTempData(dataToPlot(\"bar\", rackTemp, [\"temp_c\"]));\n    setRackHumData(dataToPlot(\"bar\", rackHum, [\"humidity\"]));\n    setDeviceCpuFreqData(dataToPlot(\"bar\", deviceCpu, [\"cpu_freq_current\"]));\n    setDeviceCpuPercData(dataToPlot(\"bar\", deviceCpu, [\"cpu_percent\"]));\n    setDeviceMemData(dataToPlot(\"line\", deviceMem, [\"mem_free\", \"mem_used\"]));\n    setDeviceDiskData(dataToPlot(\"line\", deviceDisk, [\"disk_free\", \"disk_used\"]));\n  }\n\n  const dataToPlot = (type, data, values) => {\n    let plotData = []\n    switch (values.length) {\n      case 1:\n        plotData = [{\n          type: type,\n          y: unpackData(data, values[0]),\n          x: unpackData(data, \"time\")\n        }];\n\n        break;\n      case 2:\n        plotData = [\n          {\n            type: type,\n            name: values[0],\n            y: unpackData(data, values[0]),\n            x: unpackData(data, \"time\")\n          },\n          {\n            type: type,\n            name: values[1],\n            y: unpackData(data, values[1]),\n            x: unpackData(data, \"time\")\n          },\n        ];\n        break;\n      case 3:\n        break;\n    }\n    return plotData;\n  }\n\n  const unpackData = (arr, key) => {\n    return arr.map(obj => obj[key])\n  }\n\n  useEffect(() => {\n    fetchMeasurements();\n    const interval = setInterval(() => {\n      fetchMeasurements();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const graphConfig = {\n    scrollZoom: true\n  }\n\n  const graphLayout = {\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Homelabify</h1>\n      </header>\n      <Status />\n      <section className=\"bottom-content\">\n        <CustomPlot layout={{ title: \"Rack | Temperature in °C\" }} graphData={rackTempData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Rack | Humidity in %\" }} graphData={rackHumData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | CPU Frequency in Mhz\" }} graphData={deviceCpuFreqData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | CPU Load in %\" }} graphData={deviceCpuPercData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | Memory in MB\" }} graphData={deviceMemData} config={graphConfig} />\n        <CustomPlot layout={{ title: \"Device | Disk in Byte\" }} graphData={deviceDiskData} config={graphConfig} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}