{"version":3,"sources":["logo.svg","components/Plot.js","components/Status.js","App.js","reportWebVitals.js","index.js"],"names":["CustomPlot","props","className","data","graphData","layout","config","Status","useState","netInfo","setNetInfo","healthCheck","setHealthCheck","fetchNetworkInfo","a","fetch","then","res","json","ip","hostname","fetchHealthCheck","influxdb","influxdb_status","measurement","measurement_status","alert","alert_status","useEffect","interval","setInterval","clearInterval","onClick","App","rackTempData","setRackTempData","rackHumData","setRackHumData","deviceCpuFreqData","setDeviceCpuFreqData","deviceCpuPercData","setDeviceCpuPercData","deviceMemData","setDeviceMemData","deviceDiskData","setDeviceDiskData","fetchMeasurements","Promise","all","rackTemp","rackHum","deviceCpu","deviceMem","deviceDisk","dataToPlot","type","values","plotData","length","y","unpackData","x","name","arr","key","map","obj","graphConfig","scrollZoom","title","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd3fd1b9.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport Plot from 'react-plotly.js';\n\nconst CustomPlot = (props) => {\n\n  return (\n    <div className=\"plotwrapper\">\n      <Plot className=\"linegraph\" data={props.graphData} layout={props.layout} config={props.config} />\n    </div>\n  );\n\n};\n\nexport default CustomPlot;\n","import React, { useState, useEffect } from \"react\";\n\nconst Status = (props) => {\n  const [netInfo, setNetInfo] = useState({});\n  const [healthCheck, setHealthCheck] = useState({});\n\n  const fetchNetworkInfo = async () => {\n    let data = await fetch(\"/api/device/net\").then((res) => res.json());\n\n    setNetInfo({\n      ip: data[0].ip,\n      hostname: data[0].hostname,\n    });\n  };\n\n  const fetchHealthCheck = async () => {\n    let data = await fetch(\"/api/healthcheck\").then((res) => res.json());\n\n    setHealthCheck({\n      influxdb: data[0].influxdb_status,\n      measurement: data[0].measurement_status,\n      alert: data[0].alert_status,\n    });\n  };\n\n  const toggleAlert = () => {\n    fetch(\"/api/control/alert\");\n  };\n\n  const toggleMeasurement = () => {\n    fetch(\"/api/control/measurement\");\n  };\n\n  useEffect(() => {\n    fetchNetworkInfo();\n    fetchHealthCheck();\n    const interval = setInterval(() => {\n      fetchNetworkInfo();\n      fetchHealthCheck();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"top-content\">\n      <div className=\"top-content-status\">\n        <div>\n          <b>IP </b> {netInfo.ip}\n        </div>\n        <div>\n          <b>Hostname </b> {netInfo.hostname}\n        </div>\n        <div>\n          <b>influxdb </b>\n          <span className={healthCheck.influxdb ? \"green\" : \"red\"}>\n            {healthCheck.influxdb ? \"running\" : \"not running\"}\n          </span>\n        </div>\n        <div>\n          <b>measurement.py </b>\n          <span className={healthCheck.measurement ? \"green\" : \"red\"}>\n            {healthCheck.measurement ? \"running\" : \"not running\"}\n          </span>\n        </div>\n        <div>\n          <b>alert.py </b>\n          <span className={healthCheck.alert ? \"green\" : \"red\"}>\n            {healthCheck.alert ? \"running\" : \"not running\"}\n          </span>\n        </div>\n      </div>\n      <div className=\"top-content-buttons\">\n        <button onClick={toggleAlert}>Toggle Alerts</button>\n        <button onClick={toggleMeasurement}>Toggle Measurement</button>\n      </div>\n    </div>\n  );\n};\n\nexport default Status;\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport CustomPlot from \"./components/Plot\";\nimport Status from \"./components/Status\";\n\nfunction App() {\n  const [rackTempData, setRackTempData] = useState(null);\n  const [rackHumData, setRackHumData] = useState(null);\n  const [deviceCpuFreqData, setDeviceCpuFreqData] = useState(null);\n  const [deviceCpuPercData, setDeviceCpuPercData] = useState(null);\n  const [deviceMemData, setDeviceMemData] = useState(null);\n  const [deviceDiskData, setDeviceDiskData] = useState(null);\n\n  const fetchMeasurements = async () => {\n    const [\n      rackTemp,\n      rackHum,\n      deviceCpu,\n      deviceMem,\n      deviceDisk,\n    ] = await Promise.all([\n      fetch(\"/api/temperature/celsius\").then((res) => res.json()),\n      fetch(\"/api/temperature/humidity\").then((res) => res.json()),\n      fetch(\"/api/device/cpu\").then((res) => res.json()),\n      fetch(\"/api/device/memory\").then((res) => res.json()),\n      fetch(\"/api/device/disk\").then((res) => res.json()),\n    ]);\n\n    setRackTempData(dataToPlot(\"bar\", rackTemp, [\"temp_c\"]));\n    setRackHumData(dataToPlot(\"bar\", rackHum, [\"humidity\"]));\n    setDeviceCpuFreqData(dataToPlot(\"bar\", deviceCpu, [\"cpu_freq_current\"]));\n    setDeviceCpuPercData(dataToPlot(\"bar\", deviceCpu, [\"cpu_percent\"]));\n    setDeviceMemData(dataToPlot(\"line\", deviceMem, [\"mem_free\", \"mem_used\"]));\n    setDeviceDiskData(\n      dataToPlot(\"line\", deviceDisk, [\"disk_free\", \"disk_used\"])\n    );\n  };\n\n  const dataToPlot = (type, data, values) => {\n    let plotData = [];\n    switch (values.length) {\n      case 1:\n        plotData = [\n          {\n            type: type,\n            y: unpackData(data, values[0]),\n            x: unpackData(data, \"time\"),\n          },\n        ];\n\n        break;\n      case 2:\n        plotData = [\n          {\n            type: type,\n            name: values[0],\n            y: unpackData(data, values[0]),\n            x: unpackData(data, \"time\"),\n          },\n          {\n            type: type,\n            name: values[1],\n            y: unpackData(data, values[1]),\n            x: unpackData(data, \"time\"),\n          },\n        ];\n        break;\n      case 3:\n        break;\n    }\n    return plotData;\n  };\n\n  const unpackData = (arr, key) => {\n    return arr.map((obj) => obj[key]);\n  };\n\n  useEffect(() => {\n    fetchMeasurements();\n    const interval = setInterval(() => {\n      fetchMeasurements();\n    }, 10000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const graphConfig = {\n    scrollZoom: true,\n  };\n\n  const graphLayout = {};\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Homelabify</h1>\n      </header>\n      <Status />\n      <section className=\"bottom-content\">\n        <CustomPlot\n          layout={{ title: \"Rack | Temperature in °C\" }}\n          graphData={rackTempData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Rack | Humidity in %\" }}\n          graphData={rackHumData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | CPU Frequency in Mhz\" }}\n          graphData={deviceCpuFreqData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | CPU Load in %\" }}\n          graphData={deviceCpuPercData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | Memory in MB\" }}\n          graphData={deviceMemData}\n          config={graphConfig}\n        />\n        <CustomPlot\n          layout={{ title: \"Device | Disk in Byte\" }}\n          graphData={deviceDiskData}\n          config={graphConfig}\n        />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}